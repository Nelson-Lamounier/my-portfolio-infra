# @format

AWSTemplateFormatVersion: 2010-09-09

Parameters:
  Region:
    Type: String
  ECSClusterNameParam:
    Type: String
  ECSServiceNameParam:
    Type: String

Resources:
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Ref ECSClusterNameParam

  TaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy

  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /ecs/portfolio-task
      RetentionInDays: 1

  Project1LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /ecs/project1-task
      RetentionInDays: 1

  Project2LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /ecs/project2-task
      RetentionInDays: 1

  ProjectFrontendEcommLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /ecs/frontend-ecomm-task
      RetentionInDays: 1

  ProjectBackendEcommLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /ecs/backend-ecomm-task
      RetentionInDays: 1

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: portfolio-task
      Cpu: 2048
      Memory: 4096
      RequiresCompatibilities:
        - EC2
      NetworkMode: awsvpc
      ExecutionRoleArn: !GetAtt TaskExecutionRole.Arn
      ContainerDefinitions:
        - Name: app-container
          Image: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/portfolio-dev:latest"
          Cpu: 384
          MemoryReservation: 512
          Essential: true
          PortMappings:
            - ContainerPort: 80
              Protocol: tcp
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: /ecs/portfolio-task
              awslogs-region: !Ref "AWS::Region"
              awslogs-stream-prefix: ecs

        - Name: project1-container
          Image: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/project1-dev:latest"
          Cpu: 128
          MemoryReservation: 256
          Essential: false
          PortMappings:
            - ContainerPort: 3000
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: /ecs/project1-task
              awslogs-region: !Ref Region
              awslogs-stream-prefix: ecs

        - Name: project2-container
          Image: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/project2-dev:latest"
          Cpu: 128
          MemoryReservation: 256
          Essential: false
          PortMappings:
            - ContainerPort: 3001
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: /ecs/project2-task
              awslogs-region: !Ref Region
              awslogs-stream-prefix: ecs

        - Name: project-frontend-ecomm-container
          Image: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/frontend-ecomm-dev:latest"
          Cpu: 128
          MemoryReservation: 256
          Essential: false
          PortMappings:
            - ContainerPort: 3002
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: /ecs/frontend-ecomm-task
              awslogs-region: !Ref Region
              awslogs-stream-prefix: ecs

        - Name: project-backend-ecomm-container
          Image: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/backend-ecomm-dev:latest"
          Cpu: 128
          MemoryReservation: 256
          Essential: false
          PortMappings:
            - ContainerPort: 4000
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: /ecs/backend-ecomm-task
              awslogs-region: !Ref Region
              awslogs-stream-prefix: ecs

  TaskSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow inboud access to ECS tasks
      VpcId: !ImportValue VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 3000
          ToPort: 3000
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 3001
          ToPort: 3001
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 3002
          ToPort: 3002
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 4000
          ToPort: 4000
          CidrIp: 0.0.0.0/0

  ECSService:
    Type: AWS::ECS::Service
    Properties:
      ServiceName: !Ref ECSServiceNameParam
      Cluster: !Ref ECSCluster
      DesiredCount: 1
      LaunchType: EC2
      TaskDefinition: !Ref TaskDefinition
      LoadBalancers:
        - ContainerName: app-container
          ContainerPort: 80
          TargetGroupArn: !ImportValue TargetGroupArn
      NetworkConfiguration:
        AwsvpcConfiguration:
          Subnets:
            - !ImportValue PublicSubnet1
            - !ImportValue PublicSubnet2
          SecurityGroups:
            - !Ref TaskSecurityGroup
      EnableECSManagedTags: true
      DeploymentController:
        Type: ECS
      HealthCheckGracePeriodSeconds: 180
      DeploymentConfiguration:
        MaximumPercent: 100
        MinimumHealthyPercent: 0

  Project1ECSService:
    Type: AWS::ECS::Service
    Properties:
      ServiceName: project1-service
      Cluster: !Ref ECSCluster
      DesiredCount: 1
      LaunchType: EC2
      TaskDefinition: !Ref TaskDefinition
      LoadBalancers:
        - ContainerName: project1-container
          ContainerPort: 3000
          TargetGroupArn: !ImportValue Project1TargetGroupArn
      NetworkConfiguration:
        AwsvpcConfiguration:
          Subnets:
            - !ImportValue PublicSubnet1
            - !ImportValue PublicSubnet2
          SecurityGroups:
            - !Ref TaskSecurityGroup
      EnableECSManagedTags: true
      DeploymentController:
        Type: ECS
      HealthCheckGracePeriodSeconds: 180
      DeploymentConfiguration:
        MaximumPercent: 100
        MinimumHealthyPercent: 0

  Project2ECSService:
    Type: AWS::ECS::Service
    Properties:
      ServiceName: project2-service
      Cluster: !Ref ECSCluster
      DesiredCount: 1
      LaunchType: EC2
      TaskDefinition: !Ref TaskDefinition
      LoadBalancers:
        - ContainerName: project2-container
          ContainerPort: 3001
          TargetGroupArn: !ImportValue Project2TargetGroupArn
      NetworkConfiguration:
        AwsvpcConfiguration:
          Subnets:
            - !ImportValue PublicSubnet1
            - !ImportValue PublicSubnet2
          SecurityGroups:
            - !Ref TaskSecurityGroup
      EnableECSManagedTags: true
      DeploymentController:
        Type: ECS
      HealthCheckGracePeriodSeconds: 180
      DeploymentConfiguration:
        MaximumPercent: 100
        MinimumHealthyPercent: 0

  ProjectFrontendECSService:
    Type: AWS::ECS::Service
    Properties:
      ServiceName: Ec-Frontend-service
      Cluster: !Ref ECSCluster
      DesiredCount: 1
      LaunchType: EC2
      TaskDefinition: !Ref TaskDefinition
      LoadBalancers:
        - ContainerName: project-frontend-ecomm-container
          ContainerPort: 3002
          TargetGroupArn: !ImportValue ProjectFrontendEcommTargetGroupArn
      NetworkConfiguration:
        AwsvpcConfiguration:
          Subnets:
            - !ImportValue PublicSubnet1
            - !ImportValue PublicSubnet2
          SecurityGroups:
            - !Ref TaskSecurityGroup
      EnableECSManagedTags: true
      DeploymentController:
        Type: ECS
      HealthCheckGracePeriodSeconds: 180
      DeploymentConfiguration:
        MaximumPercent: 100
        MinimumHealthyPercent: 0

  ProjectBackendECSService:
    Type: AWS::ECS::Service
    Properties:
      ServiceName: Ec-Backend-service
      Cluster: !Ref ECSCluster
      DesiredCount: 1
      LaunchType: EC2
      TaskDefinition: !Ref TaskDefinition
      LoadBalancers:
        - ContainerName: project-backend-ecomm-container
          ContainerPort: 4000
          TargetGroupArn: !ImportValue ProjectBackendEcommTargetGroupArn
      NetworkConfiguration:
        AwsvpcConfiguration:
          Subnets:
            - !ImportValue PublicSubnet1
            - !ImportValue PublicSubnet2
          SecurityGroups:
            - !Ref TaskSecurityGroup
      EnableECSManagedTags: true
      DeploymentController:
        Type: ECS
      HealthCheckGracePeriodSeconds: 180
      DeploymentConfiguration:
        MaximumPercent: 100
        MinimumHealthyPercent: 0

Outputs:
  ECSClusterName:
    Value: !Ref ECSCluster
    Export:
      Name: ECSClusterName

  ECSServiceName:
    Value: !Ref ECSServiceNameParam
    Export:
      Name: ECSServiceName

  Project1ECSServiceName:
    Value: !Ref Project1ECSService
    Export:
      Name: Project1ECSServiceName

  Project2ECSServiceName:
    Value: !Ref Project2ECSService
    Export:
      Name: Project2ECSServiceName

  ProjectFrontendECSServiceName:
    Value: !Ref ProjectFrontendECSService
    Export:
      Name: ProjectFrontendECSServiceName

  ProjectBackendECSServiceName:
    Value: !Ref ProjectBackendECSService
    Export:
      Name: ProjectBackendECSServiceName

  TaskExecutionRoleArn:
    Description: ARN of the ECS task execution role
    Value: !GetAtt TaskExecutionRole.Arn
    Export:
      Name: TaskExecutionRoleArn

  TaskSecurityGroup:
    Value: !Ref TaskSecurityGroup
    Export:
      Name: TaskSecurityGroup

  ForceUpdate:
    Description: Dummy output to force stack update
    Value: "1"
